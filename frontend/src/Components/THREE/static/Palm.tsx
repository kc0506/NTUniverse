/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


import React, { RefObject, useEffect, useRef } from 'react'
import {
	useGLTF,

} from '@react-three/drei'
import { ObjectProps } from '../Bike'
import { Triplet, useCompoundBody, useCylinder, useLockConstraint, usePlane, usePointToPointConstraint, useSphere } from '@react-three/cannon'
import { useControls } from 'leva'
import { Object3DProps, ThreeEvent, useFrame } from '@react-three/fiber'
import { Mesh } from 'three'


function Model(props) {
	const group = useRef()
	const { nodes, materials } = useGLTF('https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/palm-detailed-long/model.gltf')
	return (
		<group ref={group} {...props} dispose={null}>
			<group position={[3.92, 0, -7.17,]} >
				{/* @ts-ignore */}
				<mesh geometry={nodes.Group_152.geometry} material={materials['wood.011']} position={[-0.65, 0, 0.59,]} scale={0.77} />
				{/* @ts-ignore */}
				<mesh geometry={nodes.Group_154.geometry} material={materials['leaves.001']} position={[0, 1.72, 0,]} />
			</group>

		</group>
	)
}


interface IProps {
	objectProps?: Object3DProps & ObjectProps,
};
export default function Palm({ objectProps }: IProps) {

	const radius = 0.5, height = 5, trunkPosition = height / 2;
	const [trunk, trunkApi] = useCylinder(() => ({
		// type: 'Static',
		velocity: [0, 0, 0],
		angularVelocity: [0, 0, 0],
		mass: 4,
		args: [radius, radius, height, 32],
		position: objectProps.position.map((x, i) =>
			(x += (Number(i == 1)) * trunkPosition)) as Triplet,
	}))

	const topRadius = 1.8, topHeight = 0.5;
	const [topper, topperApi] = useCylinder(() => ({
		mass: 5,
		// type: 'Static',
		velocity: [0, 0, 0],
		angularVelocity: [0, 0, 0],
		args: [topRadius, topRadius, topHeight, 16],
		position: objectProps.position.map((x, i) =>
			(x += Number(i == 1) * (height + topHeight / 2))) as Triplet,
	}));

	const rootRadius = 3, rootHeight = 0.05;
	const [root, rootApi] = useCylinder(() => ({
		mass: 2000,
		// type: 'Static',
		velocity: [0, 0, 0],
		angularVelocity: [0, 0, 0],
		args: [rootRadius, rootRadius, rootHeight, 16],
		// collisionResponse: false,
		position: objectProps.position,
	}));


	useLockConstraint(trunk, topper, {
		maxForce: 200000,
	});
	useLockConstraint(trunk, root, {
		maxForce: 200000,
	});

	const { position, scale } = useControls({
		position: {
			value: {
				x: -3.15, y: -0.950, z: 6.4
			},
			step: 0.05,
		},
		scale: {
			value: 2.7,
			step: 0.05,
		},
		radius: {
			value: 1.5,
			step: 0.05,
		}
	})


	const magnitude = 20000;
	const handleClick = ((e: ThreeEvent<MouseEvent>) => {
		const { ray, point, distance } = e;
		const effectiveMagnitude = magnitude / 2 / Math.max(0.2, distance);
		const force = ray.direction.normalize().multiplyScalar(effectiveMagnitude).toArray();
		const applyPoint = point.toArray();
		//console.log(effectiveMagnitude);
		trunkApi.applyForce(force, applyPoint);
		topperApi.applyForce(force, applyPoint);
	})

	window.addEventListener('keypress', (e) => {
		if (e.key === ' ') {
			trunkApi.velocity.set(0, 0, 0);
		}
	})

	return (
		// @ts-ignore
		<mesh {...objectProps} ref={trunk as RefObject<Mesh>} onClick={handleClick}>
			<mesh scale={scale}>
				<Model
					position={[position.x, position.y, position.z]}
				/>
			</mesh>
		</mesh>
	)
}

useGLTF.preload('https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/palm-detailed-long/model.gltf')